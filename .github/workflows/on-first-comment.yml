name: Auto Assign and Move to In Progress

on:
  issue_comment:
    types: [created]

jobs:
  auto-update:
    runs-on: ubuntu-latest

    steps:
      - name: Check if this is the first comment
        id: first-comment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_TOKEN }}
          script: |
            const issue_number = context.payload.issue.number;
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number,
            });
            return comments.data.length === 1;

      - name: Assign user who commented
        if: steps.first-comment.outputs.result == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_TOKEN }}
          script: |
            const issue_number = context.payload.issue.number;
            const user = context.payload.comment.user.login;

            await github.rest.issues.addAssignees({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number,
              assignees: [user],
            });
  
      - name: Get project item ID
        id: get-item
        if: steps.first-comment.outputs.result == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_TOKEN }}
          script: |
            const issueNodeId = context.payload.issue.node_id;
            const projectNumber = 3;
            const userLogin = "tsenturion";

            const result = await github.graphql(`
              query($userLogin: String!, $projectNumber: Int!) {
                user(login: $userLogin) {
                  projectV2(number: $projectNumber) {
                    id
                    fields(first: 20) {
                      nodes {
                        ... on ProjectV2FieldCommon {
                          id
                          name
                        }
                        ... on ProjectV2SingleSelectField {
                          options {
                            id
                            name
                          }
                        }
                      }
                    }
                    items(first: 100) {
                      nodes {
                        id
                        content {
                          ... on Issue {
                            id
                          }
                        }
                      }
                    }
                  }
                }
              }
            `, { userLogin, projectNumber });

            const project = result.user.projectV2;

            const item = project.items.nodes.find(n => n.content?.id === issueNodeId);
            if (!item) {
              core.setFailed("Issue not found in project.");
              return;
            }

            const statusField = project.fields.nodes.find(f => f.name === "Status");
            if (!statusField) {
              core.setFailed("Status field not found.");
              return;
            }

            const inProgressOption = statusField.options.find(opt => opt.name === "In Progress");
            if (!inProgressOption) {
              core.setFailed('"In Progress" option not found.');
              return;
            }

            core.setOutput("projectData", JSON.stringify({
              projectId: project.id,
              itemId: item.id,
              fieldId: statusField.id,
              optionId: inProgressOption.id
            }));


      - name: Set status to In Progress
        if: steps.first-comment.outputs.result == 'true'
        uses: actions/github-script@v7
        env:
          PROJECT_DATA: ${{ steps.get-item.outputs.projectData }}
        with:
          github-token: ${{ secrets.GH_TOKEN }}
          script: |
            const data = JSON.parse(process.env.PROJECT_DATA);

            await github.graphql(`
              mutation($input: UpdateProjectV2ItemFieldValueInput!) {
                updateProjectV2ItemFieldValue(input: $input) {
                  projectV2Item {
                    id
                  }
                }
              }
            `, {
              input: {
                projectId: data.projectId,
                itemId: data.itemId,
                fieldId: data.fieldId,
                value: {
                  singleSelectOptionId: data.optionId
                }
              }
            });
