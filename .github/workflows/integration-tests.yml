name: Integration Tests for First Comment Workflow

on:
  push:
    paths:
      - '.github/workflows/on-first-comment.yml'

jobs:
  run-integration-tests:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
      repository-projects: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up GitHub CLI
        uses: cli/gh-action@v2

      - name: Authenticate GH CLI
        run: echo "${{ secrets.GH_TOKEN }}" | gh auth login --with-token

      - name: Create 3 test issues
        id: create
        run: |
          create_issue() {
            local title=$1
            gh issue create -t "$title" -b "Test issue for $title" --json number,node_id > "$title.json"
            jq -r '.number' "$title.json" >> issue_numbers.txt
          }

          create_issue "Issue No Status"
          create_issue "Issue Todo"
          create_issue "Issue Blocked"

      - name: Extract issue info
        id: extract
        run: |
          mapfile -t numbers < issue_numbers.txt
          echo "issue1_number=${numbers[0]}" >> $GITHUB_OUTPUT
          echo "issue2_number=${numbers[1]}" >> $GITHUB_OUTPUT
          echo "issue3_number=${numbers[2]}" >> $GITHUB_OUTPUT

      - name: Assign issues to Project and set statuses
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          project_id=$(gh project list --owner tsenturion --format json | jq -r '.[] | select(.number==3) | .id')

          for i in Issue*.json; do
            node_id=$(jq -r '.node_id' "$i")
            gh project item-add $project_id --content-id "$node_id"
          done

          # Set statuses
          node2=$(jq -r '.node_id' IssueTodo.json)
          node3=$(jq -r '.node_id' IssueBlocked.json)

          gh project item-edit-field $project_id --field "Status" --item "$node2" --value "Todo"
          gh project item-edit-field $project_id --field "Status" --item "$node3" --value "Blocked"

      - name: Add first comment to all issues
        run: |
          for num in $(cat issue_numbers.txt); do
            gh issue comment "$num" -b "First test comment"
          done

      - name: Wait for action to apply
        run: sleep 30

      - name: Validate expected changes
        run: |
          validate_issue() {
            local number=$1
            local expect_assignee=$2
            local expect_status=$3
            local description=$4

            echo "üîé Checking $description (#$number)..."

            assignees=$(gh issue view "$number" --json assignees | jq -r '.assignees[].login // empty')
            status=$(gh project item-list --owner tsenturion --format json --project 3 \
              | jq -r ".[] | select(.content.number == $number) | .fieldValues[] | select(.field.name == \"Status\") | .name // \"\"")

            if [[ "$assignees" == "$expect_assignee" ]]; then
              echo "‚úÖ Assignee OK ($assignees)"
            else
              echo "‚ùå Assignee mismatch: $assignees != $expect_assignee"
              exit 1
            fi

            if [[ "$status" == "$expect_status" ]]; then
              echo "‚úÖ Status OK ($status)"
            else
              echo "‚ùå Status mismatch: $status != $expect_status"
              exit 1
            fi
          }

          issue1=${{ steps.extract.outputs.issue1_number }}
          issue2=${{ steps.extract.outputs.issue2_number }}
          issue3=${{ steps.extract.outputs.issue3_number }}

          validate_issue "$issue1" "tsenturion" "In Progress" "Issue No Status"
          validate_issue "$issue2" "tsenturion" "In Progress" "Issue Todo"

          # Issue 3 (Blocked) must remain unchanged
          blocked_assignee_count=$(gh issue view "$issue3" --json assignees | jq '.assignees | length')
          if [[ "$blocked_assignee_count" -eq 0 ]]; then
            echo "‚úÖ Blocked issue has no assignees"
          else
            echo "‚ùå Blocked issue should have no assignees"
            exit 1
          fi

          status=$(gh project item-list --owner tsenturion --format json --project 3 \
              | jq -r ".[] | select(.content.number == $issue3) | .fieldValues[] | select(.field.name == \"Status\") | .name // \"\"")

          if [[ "$status" == "Blocked" ]]; then
            echo "‚úÖ Blocked issue kept its status"
          else
            echo "‚ùå Blocked issue status changed: $status"
            exit 1
          fi

      - name: Add second comment
        run: |
          for num in $(cat issue_numbers.txt); do
            gh issue comment "$num" -b "Second test comment"
          done

      - name: Wait for action again
        run: sleep 30

      - name: Confirm no additional changes after second comment
        run: |
          for num in $(cat issue_numbers.txt); do
            count=$(gh issue view "$num" --json assignees | jq '.assignees | length')
            if [[ "$count" -gt 1 ]]; then
              echo "‚ùå Issue #$num has more than one assignee after second comment"
              exit 1
            fi
          done

          echo "‚úÖ No changes after second comment"
